#!/usr/bin/python -tt
# vim: set fileencoding=utf-8
# Pavel Odvody <podvody@redhat.com>
#
# HICA - Host integrated container applications
#
# MIT License (C) 2015

import os, sys, docker, argparse, imp
from base import *

dock = docker.Client()
_injector_registry  = {}
LABELS = ["io.hica.xsocket_passthrough", "io.hica.machine_id", "io.hica.dri_passthrough", 
          "io.hica.sound_device", "io.hica.pulse", "io.hica.bind_home", "io.hica.bind_pwd",
          "io.hica.bind_users_groups", "io.hica.bind_localtime", "io.hica.env_passthrough",
          "io.hica.kvm_passthrough", "io.hica.cuda"]

def HicaLoadInjectors(path):
  """ Load all Python modules from `path`

  :param path: Relative path to module directory
  "type path: str
  """

  r = {}
  for inj in os.listdir(os.path.join(os.getcwd(), path)):
    modname, suffix = inj.rsplit('.', 1)
    if suffix == 'py':
      fullpath = os.path.join(os.getcwd(), path)
      f, filename, description = imp.find_module(modname, [fullpath])
      m = imp.load_module(modname, open(filename, 'U'), filename, description)
      try:
        m.register(r)
      except AttributeError:
        print ("Module {0} does not implement `register(context)`".format(modname))
  return r

def HicaParseArguments(labels):
  """ Parse argument and optionally show usage and terminate with `0`
  return code

  :param labels: `Labels` read from the `Image`
  :type labels: list(str)
  """

  args = argparse.ArgumentParser()
  args.add_argument("hica_app_name")
  args.add_argument("--show-args", default=False, action='store_true')

  # parse now to catch --show-args
  p, _ = args.parse_known_args()

  # add needed argparsers
  for label in labels:
    inj = _injector_registry[label]
    for (arg, typ, defval) in inj.get_injected_args():
      if arg:
        args.add_argument(arg, default=defval)

  # now that we added the argparsers we can print usage and bail
  if p.show_args:
    args.print_usage()
    sys.exit(0)

  return args.parse_args()

def HicaInjectConfiguration(labels, args, config):
  """ Inject configuration parameters for `labels` with values
  obtained from `args` into the `config` array

  :param labels: `Labels` read from the `Image`
  :type labels: list(str)
  :param args: Result of `parse_args` operation
  :type args: argparse.ArgumentParser
  :param config: Array where to inject configuration parameters
  :type config: list(str)
  """

  # map params from argparse back to injectors
  for label in labels:
    inj = _injector_registry[label]
    cfgs = []
    for (arg, typ, defval) in inj.get_injected_args():
      if arg:
        x = getattr(args, arg[2:].replace("-", "_"))
        cfgs.append((typ, x))
      else:
        cfgs.append((typ, defval))
    inj.inject_config(config, cfgs)
  return config


_injector_registry = HicaLoadInjectors("injectors")
parsed = HicaParseArguments(LABELS)
# base configuration
# run the container as current user so that file system rights are fine
# for bind mounted files
config = HicaInjectConfiguration(LABELS, parsed, ['-u', os.getuid()])

# looks like the basic mechanism works fine ;)
print config
