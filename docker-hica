#!/usr/bin/python -tt
# vim: set fileencoding=utf-8
# Pavel Odvody <podvody@redhat.com>
#
# HICA - Host integrated container applications
#
# MIT License (C) 2015

import os, sys, docker, argparse, imp
from base import *

LABELS = ["io.hica.xsocket_passthrough", "io.hica.machine_id", "io.hica.dri_passthrough"]

def HicaLoadInjectors(path):
  """ Load all Python modules from `path`

  :param path: Relative path to module directory
  "type path: str
  """

  r = {}
  for inj in os.listdir(os.path.join(os.getcwd(), path)):
    modname, suffix = inj.rsplit('.', 1)
    if suffix == 'py':
      fullpath = os.path.join(os.getcwd(), path)
      f, filename, description = imp.find_module(modname, [fullpath])
      m = imp.load_module(modname, open(filename, 'U'), filename, description)
      try:
        m.register(r)
      except AttributeError:
        print ("Module {0} does not implement `register(context)`".format(modname))
  return r

_injector_registry = HicaLoadInjectors("injectors")

# base configuration
# run the container as current user so that file system rights are fine
# for bind mounted files
config = ['-u', os.getuid()]

args = argparse.ArgumentParser()
args.add_argument("hica_app_name")

# add needed argparsers
for label in LABELS:
  inj = _injector_registry[label]
  for (arg, typ, defval) in inj.get_injected_args():
    args.add_argument(arg, default=defval)

parsed = args.parse_args()

# map params from argparse back to injectors
for label in LABELS:
  inj = _injector_registry[label]
  cfgs = []
  for (arg, typ, defval) in inj.get_injected_args():
    x = getattr(parsed, arg[2:].replace("-", "_"))
    cfgs.append((typ, x))
  inj.inject_config(config, cfgs)

# looks like the basic mechanism works fine ;)
print config
